<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trip.mapper.TeamMapper">
    <insert id="insertTeam" parameterType="com.trip.vo.TeamVO"
            useGeneratedKeys="true" keyProperty="id">
        insert into team(name,establish_time,minimum_limit,maximum_limit,start_time,end_time,scenic_id,intro,average)
        values (#{name},#{establishTime},#{minimumLimit},#{maximumLimit},#{startTime},#{endTime},#{scenicId},#{intro},#{average})
    </insert>

    <select id="selectAllTeams" resultType="com.trip.vo.TeamInfoVO">
        select t.id,t.name,t.establish_time as establishTime,t.minimum_limit as minimumLimit,
       t.maximum_limit as maximumLimit,t.start_time as startTime,t.end_time as endTime,t.intro,t.average,
       t.scenic_id as scenicId,count(*) as memberNum,s.name as scenicName,s.icon_url as scenicPicUrl
        from team t,team_member tm,scenic s where t.id = tm.team_id and s.id = t.scenic_id group by t.id
    </select>

    <select id="selectTeamById" resultType="com.trip.vo.TeamInfoVO">
        select t.id,t.name,t.establish_time as establishTime,t.minimum_limit as minimumLimit,
       t.maximum_limit as maximumLimit,t.start_time as startTime,t.end_time as endTime,t.intro,t.average,
       t.scenic_id as scenicId,count(*) as memberNum,s.name as scenicName,s.icon_url as scenicPicUrl
        from team t,team_member tm,scenic s where t.id = tm.team_id and t.id = #{teamId} and s.id = t.scenic_id group by t.id
    </select>

    <update id="updateTeam" parameterType="com.trip.vo.TeamVO">
        update team
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="minimumLimit != null">
                minimum_limit = #{minimumLimit,jdbcType=INTEGER},
            </if>
            <if test="maximumLimit != null">
                maximum_limit = #{maximumLimit,jdbcType=INTEGER},
            </if>
            <if test="startTime != null">
                start_time = #{startTime,jdbcType=INTEGER},
            </if>
            <if test="endTime != null">
                end_time = #{endTime,jdbcType=INTEGER},
            </if>
            <if test="scenicId != null">
                scenic_id = #{scenicId,jdbcType=INTEGER},
            </if>
            <if test="intro != null">
                intro = #{intro,jdbcType=VARCHAR},
            </if>
            <if test="average != null">
                average = #{average,jdbcType=DOUBLE},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectBatchOfTeamByIds" resultType="com.trip.vo.TeamInfoVO">
        select t.id,t.name,t.establish_time as establishTime,t.minimum_limit as minimumLimit,
        t.maximum_limit as maximumLimit,t.start_time as startTime,t.end_time as endTime,t.intro,t.average,
        t.scenic_id as scenicId,count(*) as memberNum,s.name as scenicName,s.icon_url as scenicPicUrl
        from team t,team_member tm,scenic s where t.id = tm.team_id and s.id = t.scenic_id
        and t.id in
        <foreach collection="list" index="index" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
        group by t.id
    </select>

    <!--<select id="selectTeamsByLeaderId" resultType="com.trip.vo.TeamInfoVO">-->
        <!--select t.id,t.name,t.establish_time as establishTime,t.minimum_limit as minimumLimit,-->
       <!--t.maximum_limit as maximumLimit,t.start_time as startTime,t.end_time as endTime,t.intro,t.average,-->
       <!--t.scenic_id as scenicId,count(*) as memberNum,s.name as scenicName,s.icon_url as scenicPicUrl-->
        <!--from team t,team_member tm,scenic s where t.id = tm.team_id and s.id = t.scenic_id and tm.user_id = #{userId} and tm.team_identity = "LEADER" group by t.id-->
    <!--</select>-->

    <!--<select id="selectTeamsByMemberId" resultType="com.trip.vo.TeamInfoVO">-->
        <!--select t.id,t.name,t.establish_time as establishTime,t.minimum_limit as minimumLimit,-->
       <!--t.maximum_limit as maximumLimit,t.start_time as startTime,t.end_time as endTime,t.intro,t.average,-->
       <!--t.scenic_id as scenicId,count(*) as memberNum,s.name as scenicName,s.icon_url as scenicPicUrl-->
        <!--from team t,team_member tm,scenic s where t.id = tm.team_id and s.id = t.scenic_id and tm.user_id = #{userId} and tm.team_identity = "MEMBER" group by t.id-->
    <!--</select>-->

    <delete id="deleteTeam" parameterType="com.trip.vo.DisbandTeamVO">
        delete from team where id=#{teamId}
    </delete>

    <select id="selectAllTeamsByScenicId" resultType="com.trip.vo.TeamInfoVO">
        select t.id,t.name,t.establish_time as establishTime,t.minimum_limit as minimumLimit,
        t.maximum_limit as maximumLimit,t.start_time as startTime,t.end_time as endTime,t.intro,t.average,
        t.scenic_id as scenicId,count(*) as memberNum,s.name as scenicName,s.icon_url as scenicPicUrl
        from team t,team_member tm,scenic s where t.id = tm.team_id and s.id = t.scenic_id and s.id=#{scenicId} group by t.id having start_time > #{currentTime} and maximumLimit > memberNum
    </select>

    <select id="selectAllTeamsCanJoin" resultType="com.trip.vo.TeamInfoVO">
        select t.id,t.name,t.establish_time as establishTime,t.minimum_limit as minimumLimit,
       t.maximum_limit as maximumLimit,t.start_time as startTime,t.end_time as endTime,t.intro,t.average,
       t.scenic_id as scenicId,count(*) as memberNum,s.name as scenicName,s.icon_url as scenicPicUrl
        from team t,team_member tm,scenic s where t.id = tm.team_id and s.id = t.scenic_id group by t.id having start_time > #{currentTime} and maximumLimit > memberNum
    </select>

    <select id="selectAllTeamsMatchConditions" resultType="com.trip.vo.TeamInfoVO">
        select t.id,t.name,t.establish_time as establishTime,t.minimum_limit as minimumLimit,
       t.maximum_limit as maximumLimit,t.start_time as startTime,t.end_time as endTime,t.intro,t.average,
       t.scenic_id as scenicId,count(*) as memberNum,s.name as scenicName,s.icon_url as scenicPicUrl
        from team t,team_member tm,scenic s where
        <if test="keyWord != null">
          t.name like CONCAT('%',#{keyWord},'%') and
        </if>
        t.id = tm.team_id and s.id = t.scenic_id
        <if test="scenicNameKeyWord != null">
            and s.id in (select id from scenic where name like CONCAT('%',#{scenicNameKeyWord},'%'))
        </if>
        group by t.id having
        <if test="beforeTime != null">
            start_time &lt;= #{beforeTime} and
        </if>
        <if test="beforeTime == null">
            start_time > #{currentTime} and
        </if>
        maximumLimit > memberNum
    </select>

    <select id="selectUserHistory" resultType="com.trip.vo.TeamInfoVO">
        select t.id,t.name,t.establish_time as establishTime,t.minimum_limit as minimumLimit,
       t.maximum_limit as maximumLimit,t.start_time as startTime,t.end_time as endTime,t.intro,t.average,
       t.scenic_id as scenicId,count(*) as memberNum,s.name as scenicName,s.icon_url as scenicPicUrl
        from team t,(select * from team_member where user_id = #{id}) tm,scenic s
        where t.id = tm.team_id and s.id = t.scenic_id and t.end_time &lt;= #{currentTime}
        group by t.id order by t.end_time desc
    </select>
</mapper>